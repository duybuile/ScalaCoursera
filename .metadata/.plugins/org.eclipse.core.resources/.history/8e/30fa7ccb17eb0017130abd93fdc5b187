package observatory

import com.sksamuel.scrimage.{Image, Pixel}
import observatory.Visualization.{interpolateColor, predictTemperature}
/**
  * 3rd milestone: interactive visualization
  * Reference: https://en.wikipedia.org/wiki/Web_Mercator
  */
object Interaction {

  /**
    * @param zoom Zoom level
    * @param x X coordinate
    * @param y Y coordinate
    * @return The latitude and longitude of the top-left corner of the tile, as per http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames
    */
  def tileLocation(zoom: Int, x: Int, y: Int): Location = Tile(x, y, zoom).toLocation

  /**
    * @param temperatures Known temperatures
    * @param colors Color scale
    * @param zoom Zoom level
    * @param x X coordinate
    * @param y Y coordinate
    * @return A 256Ã—256 image showing the contents of the tile defined by `x`, `y` and `zooms`
    */
  def tile(temperatures: Iterable[(Location, Double)], colors: Iterable[(Double, Color)], zoom: Int, x: Int, y: Int): Image = {
    val image_height = 256
    val image_width  = 256
    val transparency = 127

    def createPixelMap(width: Int, height: Int): Seq[Pixel] =
      Range(0, height * width).par.map{ position =>

        val xProjection = (position % width) / width + x
        val yProjection = (position / width) / width + x

        position -> interpolateColor(
          colors,
          predictTemperature(
            temperatures,
            tileLocation(xProjection, yProjection, zoom)
          )
        ).toPixel(transparency)
      }
        .seq
        .sortBy(_._1)
        .map(_._2)

    val pixels = createPixelMap(image_width, image_height)

    Image(image_width, image_height, pixels.toArray)
  }

  /**
    * Generates all the tiles for zoom levels 0 to 3 (included), for all the given years.
    * @param yearlyData Sequence of (year, data), where `data` is some data associated with
    *                   `year`. The type of `data` can be anything.
    * @param generateImage Function that generates an image given a year, a zoom level, the x and
    *                      y coordinates of the tile and the data to build the image from
    */
  def generateTiles[Data](
    yearlyData: Iterable[(Int, Data)],
    generateImage: (Int, Int, Int, Int, Data) => Unit
  ): Unit = {
    for {
      (year, data) <- yearlyData
      zoom <- 0 to 3
      x <- 0 until 1 << zoom
      y <- 0 until 1 << zoom
    } yield generateImage(year, zoom, x, y, data)
    ()
  }

}