package observatory

import java.time.LocalDate

import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.functions.{udf, _}
import org.apache.spark.sql.{DataFrame, Dataset, SparkSession}

/**
  * 1st milestone: data extraction
  */
object Extraction {
  
  private lazy val spark = SparkSession.builder.master("local[4]").getOrCreate()

  /** This method returns all the temperature records converted to Celsius along with their date and location
    * @param year             Year number
    * @param stationsFile     Path of the stations resource file to use (e.g. "/stations.csv")
    * @param temperaturesFile Path of the temperatures resource file to use (e.g. "/1975.csv")
    * @return A sequence containing triplets (date, location, temperature)
    */
  def locateTemperatures(year: Year, stationsFile: String, temperaturesFile: String): Iterable[(LocalDate, Location, Temperature)] = {
    val stationsDF = spark.read.csv(Extraction.getClass.getResource(stationsFile).getPath)
    val temperatureDF = spark.read.csv(Extraction.getClass.getResource(temperaturesFile).getPath)
    
    locateTemperatures(year, stationsDF, temperatureDF)
  }
  
  /**
   * @param year             Year number
   * @param stations		     DF read from stations.csv
   * @param temperature		   DF read from temperatures resource file
   * @return A sequence containing triplets (date, location, temperature)
   */
  def locateTemperatures(year: Year, stations: DataFrame, temperature: DataFrame): Iterable[(LocalDate, Location, Temperature)] = {
    
  }

  /**
    * @param records A sequence containing triplets (date, location, temperature)
    * @return A sequence containing, for each location, the average temperature over the year.
    */
  def locationYearlyAverageRecords(records: Iterable[(LocalDate, Location, Temperature)]): Iterable[(Location, Temperature)] = {
    ???
  }

}
